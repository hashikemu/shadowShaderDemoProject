material or_std
{
    u_worldMatrix = WORLD_MATRIX
    u_viewMatrix = VIEW_MATRIX
	u_ProjectionMatrix = PROJECTION_MATRIX
	u_worldViewMatrix = WORLD_VIEW_MATRIX
	u_viewProjectionMatrix = VIEW_PROJECTION_MATRIX
	u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
	u_inverseTransposeWorldMatrix = INVERSE_TRANSPOSE_WORLD_MATRIX
	u_inverseTransposeProjectionMatrix = INVERSE_TRANSPOSE_PROJECTION_MATRIX
	u_inverseTransposeWorldViewMatrix = INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX
	u_cameraPosition = CAMERA_WORLD_POSITION
	u_cameraViewPosition = CAMERA_VIEW_POSITION
	u_ambientColor = SCENE_AMBIENT_COLOR

    sampler u_cubemapTexture
    {
        mipmap = true
        wrapS = CLAMP
        wrapT = CLAMP
        minFilter = LINEAR_MIPMAP_LINEAR
        magFilter = LINEAR
    }
    
    sampler u_diffuseTexture
    {
        mipmap = true
        wrapS = CLAMP
        wrapT = CLAMP
        minFilter = LINEAR_MIPMAP_LINEAR
        magFilter = LINEAR
    }

    renderState
    {
        cullFace = true
        depthTest = true
    }
    
    technique
    {
        pass 
        {
            vertexShader = res/shaders/or_std.vert
            fragmentShader = res/shaders/or_std.frag
        }
    }
}

material mat : or_std
{
    u_ambientColor = 0.0508761, 0.0508761, 0.0508761
    u_specularExponent = 60
    
    sampler u_diffuseTexture
    {
        path = floor_tile.png
        wrapS = REPEAT
        wrapT = REPEAT
    }

    technique
    {
        pass 
        {
            defines = LIGHTING;DIRECTIONAL_LIGHT_COUNT 1;SPECULAR;TEXTURED
        }
    }
}

