material or_std
{
    u_worldMatrix = WORLD_MATRIX
    u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
    u_cameraPosition = CAMERA_WORLD_POSITION
    u_projectionMatrix = PROJECTION_MATRIX
    
    sampler u_cubemapTexture
    {
        mipmap = true
        wrapS = CLAMP
        wrapT = CLAMP
        minFilter = LINEAR_MIPMAP_LINEAR
        magFilter = LINEAR
    }

    sampler u_diffuseTexture
    {
        mipmap = true
        wrapS = CLAMP
        wrapT = CLAMP
        minFilter = LINEAR_MIPMAP_LINEAR
        magFilter = LINEAR
    }
    
    renderState
    {
        cullFace = true
        depthTest = true
    }
    
    technique
    {
        pass 
        {
            vertexShader = res/shaders/or_std.vert
            fragmentShader = res/shaders/or_std.frag
        }
    }
}

material mat : or_std
{
    u_ambientColor = 1, 1, 1, 1
    u_specularExponent = 1
    
    sampler u_diffuseTexture
    {
        path = dummy.png
        wrapS = REPEAT
        wrapT = REPEAT
    }

    technique
    {
        pass 
        {
            defines = LIGHTING;DIRECTIONAL_LIGHT_COUNT 1;TEXTURED;NO_RECV_SHADOW;NO_DEPTH
        }
    }
}

